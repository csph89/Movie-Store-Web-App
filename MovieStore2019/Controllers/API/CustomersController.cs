using AutoMapper;
using MovieStore2019.DTOs;
using MovieStore2019.Models;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Web.Http;

namespace MovieStore2019.Controllers.API
{
    public class CustomersController : ApiController 
    {
        //Here is our Web API controller.

        private ApplicationDbContext _context;

        public CustomersController()
        {
            _context = new ApplicationDbContext();
        }

        //Here we add an action that returns a list of customers.
        //--> GET /api/customers
        public IEnumerable<CustomerDto> GetCustomers()
        {
            //return _context.Customers.ToList();
            return _context.Customers.ToList().Select(Mapper.Map<Customer, CustomerDto>); //Here we pass a delegate into Select method.
        }

        //Here we add an action to get a single customer.
        //--> GET /api/customers/1
        public IHttpActionResult GetCustomer(int id)
        {
            var customer = _context.Customers.SingleOrDefault(c => c.Id == id);

            if (customer == null)
                //throw new HttpResponseException(HttpStatusCode.NotFound); //This method takes an enumeration that specifies the kind of error.
                //This is part of the RESTful convention: If the given resource is not found we returned the standard "Not Found" HTTP response.
                return NotFound();

            return Ok(Mapper.Map<Customer, CustomerDto>(customer));
        }

        //Here we add an action to create a customer (-> We post a customer to customers collection).
        //What will this action return?? By convention when we create a resource we return the newly created resource to the client,
        //because that resource will probably have an id generated by the server.
        //--> POST /api/customers
        [HttpPost] //-->We are applying this attribute here, this action will only be called if we send an HTTP POST request
        public IHttpActionResult CreateCustomer(CustomerDto customerDto)
        {
            //The customer-object-parameter will be in the request body and ASP.NET Web API Framework  will automatically initialize this.
            //First we validate this object.
            if (!ModelState.IsValid)
                //throw new HttpResponseException(HttpStatusCode.BadRequest);
                return BadRequest();

            //We have to map this customerDto back to a new domain object.
            var customer = Mapper.Map<CustomerDto, Customer>(customerDto);

            //We add this object to our context and save the changes.
            _context.Customers.Add(customer);
            _context.SaveChanges();

            //The newly created customer object has an id that is generated by the database.
            //So we want to add this id to the customerDto object and return it to the client.
            customerDto.Id = customer.Id;

            return Created(new Uri(Request.RequestUri + "/" + customer.Id), customerDto);
        }

        //Here we update a customer.
        //We need 2 parameters. The first is the id that comes from the URL, the second is the customer object which comes from the request body.
        //--> PUT /api/customers/1
        [HttpPut]
        public void UpdateCustomer(int id, CustomerDto customerDto)
        {
            //Again we need to validate this input.
            if(!ModelState.IsValid)
                throw new HttpResponseException(HttpStatusCode.BadRequest);

            var customerInDb = _context.Customers.SingleOrDefault(c => c.Id == id);

            //It's possible that the client sends an invalid id so we need to check for the existence of this object.
            if (customerInDb == null)
                throw new HttpResponseException(HttpStatusCode.NotFound);

            //Here we want to map a customerDto to a customer in our database.
            //So we pass 2 arguments: the Source-object and the Target-object. We already have the 2 objects that's why we don't have 
            //to create a new object as we do inside the above Action methods.
            Mapper.Map<CustomerDto, Customer>(customerDto, customerInDb);

            _context.SaveChanges();
        }

        //Here we add an action to delete a customer.
        //--> DELETE /api/customers/1
        [HttpDelete]
        public void DeleteCustomer(int id)
        {
            var customerInDb = _context.Customers.SingleOrDefault(c => c.Id == id);

            //It's possible that the client sends an invalid id so we need to check for the existence of this object.
            if (customerInDb == null)
                throw new HttpResponseException(HttpStatusCode.NotFound);

            _context.Customers.Remove(customerInDb); //So this object will be marked as removed in memory.
            _context.SaveChanges();
        }
    }
}
